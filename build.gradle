//
//   Copyright 2019-2023  SenX S.A.S.
//
//   Licensed under the Apache License, Version 2.0 (the "License");
//   you may not use this file except in compliance with the License.
//   You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
//   Unless required by applicable law or agreed to in writing, software
//   distributed under the License is distributed on an "AS IS" BASIS,
//   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
//   See the License for the specific language governing permissions and
//   limitations under the License.
//

plugins {
    id 'com.github.johnrengelman.shadow' version '7.0.0'
    id 'io.codearte.nexus-staging' version '0.22.0'
    id 'antlr'
    id 'java'
    id 'java-library'
    id 'idea'
    id 'maven-publish'
    id "signing"
}

project.group = 'io.warp10'
project.description = "Protocol Buffer WarpScript Extension"
project.version = getVersionFromGit()

//
// Repositories for the project dependencies
//

repositories {
    mavenCentral()
}

//
// Dependencies of the project
//

dependencies {
    //
    // Insert your dependencies here
    //
    //implementation group: 'GROUP', name: 'NAME', version: 'VERSION', classifier: 'CLASSIFIER'

    implementation 'com.google.protobuf:protobuf-java:3.15.8'

    antlr 'org.antlr:antlr4:4.7'

    // Use JUnit test framework.
    testImplementation 'junit:junit:4.13'

    // Compile time only dependencies, not used at runtime, or provided by other dependencies.
    compileOnly group: 'io.warp10', name: 'warpscript', version: '2.+'
}

java {
    withJavadocJar()
    withSourcesJar()
}

jar {
    manifest {
        attributes('WarpFleet-Description': project.description)
        attributes('WarpFleet-Group': project.group)
        attributes('WarpFleet-Artifact': project.name)
        attributes('WarpFleet-Version': project.version)
    }

    from('src/main/warpscript') {
        //
        // Only consider macros which are in our namespace
        //
        include project.group + '/' + project.name + '/*.mc2'
        include project.group + '/' + project.name + '/**/*.mc2'
    }

    from('.') {
        include 'README.md'
        include project.group + '-' + project.name + '.conf'
    }
}

shadowJar {
    classifier = ''

    from('src/main/warpscript') {
        //
        // Only consider macros which are in our namespace
        //
        include project.group + '/' + project.name + '/*.mc2'
        include project.group + '/' + project.name + '/**/*.mc2'
    }

    from('.') {
        include 'README.md'
        include project.group + '-' + project.name + '.conf'
    }
}


//
// Maven related config
//

publishing {
    publications {
        maven(MavenPublication) {
            groupId project.group
            artifactId project.name
            version = project.version
            from components.java
            pom {
                name = project.name
                description = project.description
                url = 'https://github.com/senx/' + project.name

                scm {
                    connection = 'scm:git:git://github.com/senx/' + project.name
                    developerConnection = 'scm:git:ssh://github.com/senx/' + project.name
                    url = 'https://github.com/senx/' + project.name
                }

                licenses {
                    license {
                        name = 'The Apache License, Version 2.0'
                        url = 'http://www.apache.org/licenses/LICENSE-2.0.txt'
                    }
                }

                developers {
                    developer {
                        id = 'senx'
                        name = 'SenX'
                        email = 'contact@senx.io'
                    }
                }
            }
        }

        uberJar(MavenPublication) {
            groupId project.group
            artifactId project.name
            artifact(shadowJar)
            artifact(tasks["javadocJar"])
            artifact(tasks["sourcesJar"])
            version = project.version + '-uberjar'

            pom {
                name = project.name
                description = project.description
                url = 'https://github.com/senx/' + project.name

                scm {
                    connection = 'scm:git:git://github.com/senx/' + project.name
                    developerConnection = 'scm:git:ssh://github.com/senx/' + project.name
                    url = 'https://github.com/senx/' + project.name
                }

                licenses {
                    license {
                        name = 'The Apache License, Version 2.0'
                        url = 'http://www.apache.org/licenses/LICENSE-2.0.txt'
                    }
                }

                developers {
                    developer {
                        id = 'senx'
                        name = 'SenX'
                        email = 'contact@senx.io'
                    }
                }
            }
        }
    }

    repositories {
        if (project.hasProperty("ossrhUsername")) {
            maven {
                url "https://oss.sonatype.org/service/local/staging/deploy/maven2/"
                credentials {
                    username ossrhUsername
                    password ossrhPassword
                }
            }
        }
        if (project.hasProperty("nexusUsername")) {
            maven {
                name "nexus"
                allowInsecureProtocol true
                url "$nexusHost/repository/maven-releases/"
                credentials {
                    username nexusUsername
                    password nexusPassword
                }
            }
        }
    }
}

artifacts {
    archives shadowJar, javadocJar, sourcesJar
}

if (project.hasProperty("ossrhUsername")) {
    nexusStaging {
        packageGroup = "io.warp10"
        username ossrhUsername
        password ossrhPassword
    }
}

//
// Artifact Signing
//

if (project.hasProperty("signing.gnupg.keyName")) {
    signing {
        useGpgCmd()
        sign publishing.publications
    }
}

generateGrammarSource {
    arguments += ['-package', 'io.warp10.ext.protobuf.antlr']

    doLast {
        copy {
            from 'build/generated-src/antlr/main/'
            include '*.*'
            into 'build/generated-src/antlr/main/io/warp10/ext/protobuf/antlr'
        }
        project.delete fileTree('build/generated-src/antlr/main').include('*.*')
    }
}

def getVersionFromGit() {
  def nogit = System.getProperty("nogit")
  if (null != nogit) {
    // Override version with the property value. To remove the version altogether use '-Dnogit' without value.
    return nogit
  } else {
    def stdout = new ByteArrayOutputStream()
    exec {
      commandLine 'git', 'describe', '--tags', '--always'
      standardOutput = stdout
    }
    return stdout.toString().trim()
  }
}
